digraph "Algorithm::findKEdgeMin"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node39 [label="Algorithm::findKEdgeMin",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node39 -> Node40 [color="midnightblue",fontsize="10",style="solid"];
  Node40 [label="Algorithm::makeVecEdgeGraph",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a0baa64983c2bc5762470691ec5911910"];
  Node40 -> Node41 [color="midnightblue",fontsize="10",style="solid"];
  Node41 [label="Graph::size",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_graph.html#a6539d03f6d3f42042196f0f79455bdd8",tooltip="Size() "];
  Node40 -> Node42 [color="midnightblue",fontsize="10",style="solid"];
  Node42 [label="Graph::get",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_graph.html#a78762961b8cf256a828c80cb7ec26021",tooltip="get "];
  Node40 -> Node43 [color="midnightblue",fontsize="10",style="solid"];
  Node43 [label="Algorithm::testUnicEdgeInVec",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a2f0d23d667515747f55fc21c359c2fb1"];
  Node43 -> Node44 [color="midnightblue",fontsize="10",style="solid"];
  Node44 [label="Edge::getUid",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_edge.html#abf97244f7446b4192dfa1e87a156920d",tooltip="Getter UID. "];
  Node39 -> Node45 [color="midnightblue",fontsize="10",style="solid"];
  Node45 [label="Algorithm::goKEdgeMin",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a4f5902055c640f4ec1a037e7c24cb772",tooltip="Algo/code retake from : https://stackoverflow.com/questions/12991758/creating-all-possible-k-combinat..."];
  Node45 -> Node46 [color="midnightblue",fontsize="10",style="solid"];
  Node46 [label="Algorithm::testCombinaison\lKedgeMin",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a7ada217d91dc5b83c84c851ec4441433",tooltip="Algo/code retake from : https://stackoverflow.com/questions/12991758/creating-all-possible-k-combinat..."];
  Node46 -> Node47 [color="midnightblue",fontsize="10",style="solid"];
  Node47 [label="Algorithm::killEdgeByIndex",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a4527b9ab55d27dcaf015181bb3e1b99a"];
  Node46 -> Node48 [color="midnightblue",fontsize="10",style="solid"];
  Node48 [label="Algorithm::testStrongConnexe\lGraph",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a9a76807cae303dac7bcac84e18b00c86"];
  Node48 -> Node49 [color="midnightblue",fontsize="10",style="solid"];
  Node49 [label="Algorithm::clearAllMarck",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a86fac96d365d99c0a210f060a1daa67c"];
  Node49 -> Node41 [color="midnightblue",fontsize="10",style="solid"];
  Node49 -> Node42 [color="midnightblue",fontsize="10",style="solid"];
  Node48 -> Node50 [color="midnightblue",fontsize="10",style="solid"];
  Node50 [label="Algorithm::processedGraph\lRecursive",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#aa3909b7cd8efd5c0d2351bcb7923e888"];
  Node50 -> Node42 [color="midnightblue",fontsize="10",style="solid"];
  Node50 -> Node51 [color="midnightblue",fontsize="10",style="solid"];
  Node51 [label="Graph::getIndexByUid",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_graph.html#a2d8d8d9edb8a496d5c252132cdbbbc08",tooltip="getIndexByUid "];
  Node48 -> Node42 [color="midnightblue",fontsize="10",style="solid"];
  Node48 -> Node52 [color="midnightblue",fontsize="10",style="solid"];
  Node52 [label="Algorithm::checkAllNodeMarck",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#aee02f753076dd71f76d029249c2e1e22"];
  Node52 -> Node41 [color="midnightblue",fontsize="10",style="solid"];
  Node52 -> Node42 [color="midnightblue",fontsize="10",style="solid"];
  Node46 -> Node53 [color="midnightblue",fontsize="10",style="solid"];
  Node53 [label="Algorithm::reviveEdgeByIndex",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a698172d74eea712bc92a75375a1de946"];
  Node45 -> Node54 [color="midnightblue",fontsize="10",style="solid"];
  Node54 [label="Algorithm::saveEdgeByIndex",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#a946680d5d61db2c1f71ee80f95e6436e",tooltip="Fin inspiration. "];
  Node45 -> Node53 [color="midnightblue",fontsize="10",style="solid"];
  Node39 -> Node55 [color="midnightblue",fontsize="10",style="solid"];
  Node55 [label="Algorithm::processedEdge\lByPointeur",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$struct_algorithm.html#ad92c4d7081bf7851114a5f9b76b106bf"];
  Node55 -> Node56 [color="midnightblue",fontsize="10",style="solid"];
  Node56 [label="Edge::setProcessed",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_edge.html#a33bc7cc18ba5f4bea6ba562722d70192",tooltip="Setter processed. "];
}
